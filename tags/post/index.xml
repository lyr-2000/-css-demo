<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>post on 凌冬的前端实验室</title>
    <link>https://lyr-2000.github.io/html-demo/tags/post/</link>
    <description>Recent content in post on 凌冬的前端实验室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>LYR</copyright>
    <lastBuildDate>Sun, 08 May 2022 19:10:48 +0800</lastBuildDate><atom:link href="https://lyr-2000.github.io/html-demo/tags/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>_index</title>
      <link>https://lyr-2000.github.io/html-demo/post/</link>
      <pubDate>Sun, 08 May 2022 19:10:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/</guid>
      <description></description>
    </item>
    
    <item>
      <title>_index</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/</link>
      <pubDate>Sun, 08 May 2022 19:10:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/</guid>
      <description></description>
    </item>
    
    <item>
      <title>_index</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 08 May 2022 19:10:48 +0800</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MVVM架构</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/05.android%E7%9B%B8%E5%85%B3/01.mvvm%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Tue, 20 Apr 2021 21:51:09 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/05.android%E7%9B%B8%E5%85%B3/01.mvvm%E6%9E%B6%E6%9E%84/</guid>
      <description>说到这个结构，就不得不提一下安卓的几大结构吧主要包括 MVC、MVP、MVVM 这三大结构 MVC结构 Model ：实体模型、数据的获取、存储等等 View ：Act</description>
    </item>
    
    <item>
      <title>Java书籍学习笔记</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/13.java%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 19 Apr 2021 10:05:18 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/13.java%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>Java核心技术 卷一 基本数据结构 java break可以带标签 大数值可以使用bigInteger和bigDecimal for each使用 1 2 3 for (int a:new int[]{1,2,3}){ System.out.println(a);</description>
    </item>
    
    <item>
      <title>面试问题</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/03.%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 17 Apr 2021 15:24:16 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/03.%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>对象图有几种 UML大科普：一文梳理清 14种 UML图！ (yinxiang.com) UML图分为结构图和行为图。 结构图分为类图、轮廓图、组件图、组合结构图、对象图、部署图</description>
    </item>
    
    <item>
      <title>网络安全</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/04.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/01.%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</link>
      <pubDate>Tue, 13 Apr 2021 20:46:05 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/04.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/01.%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</guid>
      <description>https中间人攻击 如何防止请求被篡改 使用https来进行请求（这点我居然没想到。。） 设置客户端白名单，客户端所有请求，请求到代理服务器(n</description>
    </item>
    
    <item>
      <title>前端</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/03.%E5%89%8D%E7%AB%AF/</link>
      <pubDate>Tue, 13 Apr 2021 20:31:38 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/03.%E5%89%8D%E7%AB%AF/</guid>
      <description>跨域问题怎么处理 通过jsonp跨域 document.domain + iframe跨域 location.hash + iframe window.name + iframe跨域 postMessage跨域 跨域资源共享（CORS） nginx</description>
    </item>
    
    <item>
      <title>HTML</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/02.html/</link>
      <pubDate>Tue, 13 Apr 2021 19:59:35 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/02.html/</guid>
      <description>优化相关 怎么优化界面，让用户体验更好 减少 HTTP 请求 使用 HTTP2 使用服务端渲染 客户端渲染: 获取 HTML 文件，根据需要下载 JavaScript 文件，运行文件，生成 DOM，再渲染。</description>
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/01.javascript/</link>
      <pubDate>Mon, 12 Apr 2021 22:18:18 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/04.javascript%E5%92%8Chtml/01.javascript/</guid>
      <description>JavaScript事件机制 DOM事件流（event flow ）存在三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。 事件捕获（event capt</description>
    </item>
    
    <item>
      <title>面试常问问题</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc&#43;&#43;%E8%AF%AD%E8%A8%80/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 12 Apr 2021 22:07:02 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc&#43;&#43;%E8%AF%AD%E8%A8%80/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E9%97%AE%E9%A2%98/</guid>
      <description>this指针是干嘛的 其作用就是指向成员函数所作用的对象， 所以非静态成员函数中可以直接使用 this 来代表指向该函数作用的对象的指针。 静态成员函数是不</description>
    </item>
    
    <item>
      <title>面试常问</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE/</link>
      <pubDate>Sat, 10 Apr 2021 17:17:18 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/02.%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE/</guid>
      <description>64匹马，8个赛道，找出跑得最快的4匹马 全部马分为8组，每组8匹，每组各跑一次，然后淘汰掉每组的后四名，如下图（需要比赛8场） 第一步 因为我们</description>
    </item>
    
    <item>
      <title>Hook规则</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/04.hook%E8%A7%84%E5%88%99/</link>
      <pubDate>Tue, 06 Apr 2021 19:13:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/04.hook%E8%A7%84%E5%88%99/</guid>
      <description>04. Hook规则 Hook 本质就是 JavaScript 函数，但是在使用它时需要遵循两条规则。我们提供了一个 linter 插件来强制执行这些规则： 只在最顶层使用 Hook 不要在循环，条件或嵌</description>
    </item>
    
    <item>
      <title>使用Effect Hook</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/03.%E4%BD%BF%E7%94%A8effect-hook/</link>
      <pubDate>Tue, 06 Apr 2021 19:13:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/03.%E4%BD%BF%E7%94%A8effect-hook/</guid>
      <description>03. 使用Effect Hook（副作用钩子） 如果你熟悉 React class 的生命周期函数，你可以把 useEffect Hook 看做 componentDidMount(挂载完成)，com</description>
    </item>
    
    <item>
      <title>使用State Hook</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/02.%E4%BD%BF%E7%94%A8state-hook/</link>
      <pubDate>Tue, 06 Apr 2021 19:13:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/02.%E4%BD%BF%E7%94%A8state-hook/</guid>
      <description>02. 使用State Hook 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import React, { useState } from &amp;#39;react&amp;#39;; function Example() { // 声明一个叫 &amp;#34;count&amp;#34; 的 state 变量 const [count, setCount] = useState(0); return ( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt; &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt; Click me &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ); } 我</description>
    </item>
    
    <item>
      <title>自定义 Hook</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/05.%E8%87%AA%E5%AE%9A%E4%B9%89-hook/</link>
      <pubDate>Tue, 06 Apr 2021 19:13:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/12.react%E7%AC%94%E8%AE%B0/03.hook/05.%E8%87%AA%E5%AE%9A%E4%B9%89-hook/</guid>
      <description>05. 自定义 Hook 通过自定义 Hook，可以将组件逻辑提取到可重用的函数中。 目前为止，在 React 中有两种流行的方式来共享组件之间的状态逻辑: render props 和高阶组件，</description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/6.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 06 Apr 2021 13:26:55 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/6.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>常用操作命令 数据库操作命令 1 2 3 4 5 6 7 8 9 10 11 12 13 # 查看数据库 show dbs; # 切换数据库（如果没有对应的数据库则创建） use 数据库名; # 创建集合 db.c</description>
    </item>
    
    <item>
      <title>体系和架构</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/5.%E4%BD%93%E7%B3%BB%E5%92%8C%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Tue, 06 Apr 2021 13:18:04 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/5.%E4%BD%93%E7%B3%BB%E5%92%8C%E6%9E%B6%E6%9E%84/</guid>
      <description>MongoDB体系结构 MongoDB的体系结构如下所示：磁盘文件经过加载之后后形成 MongoDB 实例，一个 MongoDB 实例中可以存放多个数据库（图中的MongoD</description>
    </item>
    
    <item>
      <title>分布式和集群</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/4.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Tue, 06 Apr 2021 13:16:20 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/4.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E9%9B%86%E7%BE%A4/</guid>
      <description>MongoDB集群 MongoDB有三种集群的搭建方式 Replica Set 副本集 Sharding 切片 Master-Slaver 主从（不推荐使用） 其中，Sharding集群也是三种集群中最复杂的。副</description>
    </item>
    
    <item>
      <title>索引</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/3.%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Tue, 06 Apr 2021 11:04:00 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/3.%E7%B4%A2%E5%BC%95/</guid>
      <description>MongoDB也是有索引的 索引是对数据库一列或多列值进行排序的存储结构，底层一般是一种树状结构，没有索引查询会进行全表扫描，数据量大的时候会</description>
    </item>
    
    <item>
      <title>存储引擎</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/2.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Tue, 06 Apr 2021 10:50:32 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/2.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description>存储引擎介绍 MongoDB支持的引擎有：WiredTiger，MMAPv1和In-Memory。 从MongoDB 3.2 版本开始，WiredTig</description>
    </item>
    
    <item>
      <title>设计一个IM系统</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/3.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAim%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 31 Mar 2021 20:48:35 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/3.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAim%E7%B3%BB%E7%BB%9F/</guid>
      <description>主要参考下面几个链接 如何设计一个亿级消息量的IM系统 - InfoQ 写作平台 一个海量在线用户即时通讯系统（IM）的完整设计Plus - 云+社区 - 腾讯云 (tencent.com) .</description>
    </item>
    
    <item>
      <title>设计一个数据库连接池</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/4.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Wed, 31 Mar 2021 20:48:35 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/4.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>可以参考下面这几个 如何设计并实现一个db连接池？ (juejin.cn)</description>
    </item>
    
    <item>
      <title>JWT</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/03.%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF/1.jwt/</link>
      <pubDate>Wed, 31 Mar 2021 20:48:33 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/03.%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF/1.jwt/</guid>
      <description>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分</description>
    </item>
    
    <item>
      <title>面试问题汇总</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/1.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 31 Mar 2021 16:58:03 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/03.mongodb/1.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      <description>MongoDB是由哪种语言写的 MongoDB用c++编写的，流行的开源数据库MySQL也是用C++开发的。C++1983年发行是一种使用广泛</description>
    </item>
    
    <item>
      <title>面试问题整理</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</link>
      <pubDate>Wed, 31 Mar 2021 16:53:08 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</guid>
      <description>内存管理 什么是缓冲区溢出？有什么危害？其原因是什么？ 缓冲区溢出是指当计算机向缓冲区填充数据时超出了缓冲区本身的容量，溢出的数据覆盖在合法数据</description>
    </item>
    
    <item>
      <title>安全相关</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/7.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Wed, 31 Mar 2021 14:28:27 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/7.%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/</guid>
      <description>TLS是啥 SSL/TLS协议其实就是一个安全通信的协议，https采用的就是这个协议来实现安全传输，这个地方主要会问你https的工作原理 TLS</description>
    </item>
    
    <item>
      <title>面试题</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/7.%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Wed, 31 Mar 2021 10:24:33 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/7.%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>其他</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/12.%E5%85%B6%E4%BB%96/</link>
      <pubDate>Tue, 30 Mar 2021 21:07:32 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/12.%E5%85%B6%E4%BB%96/</guid>
      <description>引用类型有哪些？有什么区别？ 引用类型主要分为强软弱虚四种： 强引用指的就是代码中普遍存在的赋值方式，比如A a = new A()这种。强引用关联的对象，</description>
    </item>
    
    <item>
      <title>秒杀系统设计</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/2.%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 30 Mar 2021 18:22:43 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/2.%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</guid>
      <description>知乎上就有好多现成的例子，我就拿敖丙的来举例吧 秒杀系统会遇到的几个问题 高并发 超卖 恶意请求 链接暴露 暴露了请求地址，被人恶意请求 数据库 请求太多，</description>
    </item>
    
    <item>
      <title>设计一个抢红包功能</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/1.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%8A%A2%E7%BA%A2%E5%8C%85%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Tue, 30 Mar 2021 18:17:15 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/02.%E4%B8%9A%E5%8A%A1%E9%97%AE%E9%A2%98/1.%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%8A%A2%E7%BA%A2%E5%8C%85%E5%8A%9F%E8%83%BD/</guid>
      <description>这个其实可以使用事务来实现，比如我们可以用MySQL，抢红包时先开启事务，然后加上行锁，修改完毕后我们提交事务，释放行锁 或者我们可以使用Re</description>
    </item>
    
    <item>
      <title>MySQL底层</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/9.mysql%E5%BA%95%E5%B1%82/</link>
      <pubDate>Mon, 29 Mar 2021 08:33:41 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/9.mysql%E5%BA%95%E5%B1%82/</guid>
      <description>下图是MySQL底层的一个简单的概括图 日志部分 主要就是这部分了，下面简单介绍一下mysql的三种日志 三种日志 bin log 主要记录所有数据库表结构变更</description>
    </item>
    
    <item>
      <title>世界500强的智力题</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/01.%E4%B8%96%E7%95%8C500%E5%BC%BA%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98/</link>
      <pubDate>Thu, 25 Mar 2021 09:22:51 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/08.%E5%85%B6%E4%BB%96/01.%E6%99%BA%E5%8A%9B%E9%A2%98/01.%E4%B8%96%E7%95%8C500%E5%BC%BA%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98/</guid>
      <description>工人分金条 分蛋糕 过桥问题 黑白帽子 首先就是第一次如果都是白色，那么自己肯定是黑色的。但是没有声音，所以就可以肯定至少有两顶黑帽子，如果有个人发</description>
    </item>
    
    <item>
      <title>其他</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E5%85%B6%E4%BB%96/</link>
      <pubDate>Tue, 23 Mar 2021 22:38:16 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.%E5%85%B6%E4%BB%96/</guid>
      <description>操作系统相关 冯诺伊曼体系 该思想约定了用二进制进行计算和存储，还定义计算机基本结构为 5 个部分，分别是中央处理器（CPU）、内存、输入设备、输出</description>
    </item>
    
    <item>
      <title>面试题</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/11.%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Tue, 23 Mar 2021 19:37:14 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/11.%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>同学的一次面试 内存溢出的两种问题及原因 java.lang.OutOfMemoryError 方法区主要存储类的元信息，实现在元数据区。当JVM发现元数据区没有足够的空间分配给加载的类时，抛出该</description>
    </item>
    
    <item>
      <title>高频面试题总结</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 22 Mar 2021 20:16:49 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
      <description>不知道从哪找的 浏览器禁用 Cookie怎么保存状态 此时无法使用 Cookie 来保存用户信息，只能使用 Session。除此之外，不能再将 Session ID 存放到 Cookie 中，而是</description>
    </item>
    
    <item>
      <title>高频面试题</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/8.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Mon, 22 Mar 2021 16:12:20 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/8.%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>不知道从哪里抄的 如何查看表格定义的所有索引 SHOW INDEX FROM &amp;lt;tablename&amp;gt;; LIKE 声明中的％和 _ 是什么意思？ ％对应于 0 个或更多字符，_只是 LIKE 语句中的一个字符。 如何在 Unix 和 MySQL</description>
    </item>
    
    <item>
      <title>指针问题</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc&#43;&#43;%E8%AF%AD%E8%A8%80/01.%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 22 Mar 2021 14:00:08 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/03.cc&#43;&#43;%E8%AF%AD%E8%A8%80/01.%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98/</guid>
      <description>细说指针 让你不再害怕指针——C指针详解(经典,非常详细)_程序老兵的博客-CSDN博客_c指针详解经典非常详细 1 2 3 4 5 6 7 8 9 int p; //这是</description>
    </item>
    
    <item>
      <title>分布式和备份</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/7.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E5%A4%87%E4%BB%BD/</link>
      <pubDate>Sun, 21 Mar 2021 19:43:11 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/7.%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E5%A4%87%E4%BB%BD/</guid>
      <description>主从复制 将主数据库中的DDL和DML操作通过二进制日志（BINLOG）传输到从数据库上，然后将这些日志重新执行（重做）；从而使得从数据库的数</description>
    </item>
    
    <item>
      <title>IO管理,linuxIO模式</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.io%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.io%E7%AE%A1%E7%90%86/</guid>
      <description>Linux IO模式 linux有下面五种网络模式 阻塞 I/O（blocking IO） 默认socket就是阻塞IO，当用户进程调用了recvfrom这个系</description>
    </item>
    
    <item>
      <title>互斥和同步</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.%E4%BA%92%E6%96%A5%E5%92%8C%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.%E4%BA%92%E6%96%A5%E5%92%8C%E5%90%8C%E6%AD%A5/</guid>
      <description>CPU cache结构和缓存一致性（MESI协议） 在多核CPU中，内存中的数据会在多个核心中存在数据副本，某一个核心发生修改操作，就产生了数据不一</description>
    </item>
    
    <item>
      <title>进程和线程</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</guid>
      <description>基本概念 进程和线程的区别 进程：进程是系统进行资源分配和调度的一个独立单位，是系统中的并发执行的单位 线程：线程是进程的一个实体，也是 CPU 调度和分</description>
    </item>
    
    <item>
      <title>死锁和饥饿</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E6%AD%BB%E9%94%81%E5%92%8C%E9%A5%A5%E9%A5%BF/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/01.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.%E6%AD%BB%E9%94%81%E5%92%8C%E9%A5%A5%E9%A5%BF/</guid>
      <description>基本概念 产生死锁的原因 根本原因 就是系统能够提供的资源个数比要求该资源的进程数要少 基本原因 资源竞争和进程推进顺序不合理 产生死锁必要条件 互斥 一个</description>
    </item>
    
    <item>
      <title>体系结构</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</guid>
      <description>七层模型 五层模型 网络协议三要素 语法：即数据与控制信息的结构或格式。 语义：即需要发出何种控制信息，完成何种动作以及做出何种响应。 同步：即事件实</description>
    </item>
    
    <item>
      <title>网络层(IP,ICMP,ARP)</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.%E7%BD%91%E7%BB%9C%E5%B1%82ipicmparp/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.%E7%BD%91%E7%BB%9C%E5%B1%82ipicmparp/</guid>
      <description>ARP协议和ARP攻击 arp 协议的全称 arp协议： address resolution protocol , 地址解析协议 resolve : 解析的意思 ARP协议完成了IP地址与物理地址的映射。每一个主机都设有一</description>
    </item>
    
    <item>
      <title>应用层(HTTP,SMTP)</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.%E5%BA%94%E7%94%A8%E5%B1%82httpsmtp/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.%E5%BA%94%E7%94%A8%E5%B1%82httpsmtp/</guid>
      <description>HTTP协议特点 HTTP和HTTPS的区别 端口不同：HTTP使用的是80端口，HTTPS使用443端口； HTTP认证机制，更加安全； HTTP</description>
    </item>
    
    <item>
      <title>硬件层</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.%E7%A1%AC%E4%BB%B6%E5%B1%82/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.%E7%A1%AC%E4%BB%B6%E5%B1%82/</guid>
      <description>硬件层分为物理层和数据链路层 三种通讯方式 通信的三种基本方式：单工、半双工、双工 物理层几大特性 （1） 机械特性：指明接口所用接线器的形状和尺寸、</description>
    </item>
    
    <item>
      <title>运输层(TCP,UDP)</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.%E8%BF%90%E8%BE%93%E5%B1%82tcpudp/</link>
      <pubDate>Sat, 20 Mar 2021 15:50:06 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/03.%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/02.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.%E8%BF%90%E8%BE%93%E5%B1%82tcpudp/</guid>
      <description>TCP的三次握手 问题1 TCP可以建立两次握手嘛 不可以。有两个原因：首先，可能会出现已失效的连接请求报文段又传到了服务器端。 其次，两次握手无法</description>
    </item>
    
    <item>
      <title>SQL语句及优化</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/6.sql%E8%AF%AD%E5%8F%A5%E5%8F%8A%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/6.sql%E8%AF%AD%E5%8F%A5%E5%8F%8A%E4%BC%98%E5%8C%96/</guid>
      <description>SQL语句分为哪几类 数据定义语言DDL（Data Ddefinition Language）CREATE，DROP，ALTER 主要为以上操作 即对逻辑结构等有操作的，</description>
    </item>
    
    <item>
      <title>常见问题</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/4.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/4.%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>缓存雪崩 Redis中大批量key在同一时间同时失效导致所有请求都打到了MySQL。而MySQL扛不住导致大面积崩塌 解决方案 缓存数据的过期时间</description>
    </item>
    
    <item>
      <title>持久化</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/2.%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/2.%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description>包括 RDB 和 AOF 两种机制，下面分别进行说明 RDB RDB 持久化机制，是对 Redis 中的数据执行周期性的持久化。更适合做冷备。 优点： 压缩后的二进制文，适用于备份、全量</description>
    </item>
    
    <item>
      <title>分布式锁，过期策略，淘汰规则</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/5.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E6%B7%98%E6%B1%B0%E8%A7%84%E5%88%99/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/5.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E6%B7%98%E6%B1%B0%E8%A7%84%E5%88%99/</guid>
      <description>分布式锁 在日常情况下在进程或线程中我们可以使用 synchronized 、Lock 实现并发编程，但是我， 如何在分布式集群下使用呢？可以使用 Redisson ， Zookeeper ，Redis本身 分布</description>
    </item>
    
    <item>
      <title>集群和限流</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/6.%E9%9B%86%E7%BE%A4%E5%92%8C%E9%99%90%E6%B5%81/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/6.%E9%9B%86%E7%BE%A4%E5%92%8C%E9%99%90%E6%B5%81/</guid>
      <description>Redis有下面四种部署方式 模式 优点 缺点 单机版 架构简单，部署方便 机器故障、容量瓶颈、QPS瓶颈 主从复制 高可靠性，读写分离 故障恢复复杂，主库的</description>
    </item>
    
    <item>
      <title>事务和锁</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/4.%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/4.%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81/</guid>
      <description>概念 事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务是逻</description>
    </item>
    
    <item>
      <title>视图，存储过程，函数，触发器</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/5.%E8%A7%86%E5%9B%BE%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%87%BD%E6%95%B0%E8%A7%A6%E5%8F%91%E5%99%A8/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/5.%E8%A7%86%E5%9B%BE%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%87%BD%E6%95%B0%E8%A7%A6%E5%8F%91%E5%99%A8/</guid>
      <description>什么是视图 所谓视图，本质上是一种虚拟表，在物理上是不存在的，其内容与真实的表相似，包含一系列带有名称的列和行数据。但是，视图并不在数据库中以</description>
    </item>
    
    <item>
      <title>数据库基础</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</guid>
      <description>数据库三大范式 第一范式（属性不可再分） 如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。 第二范式（每个非主属性</description>
    </item>
    
    <item>
      <title>数据类型</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/1.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/1.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>本文参考：硬核Redis总结，看这篇就够了！ (qq.com) 8大基本数据类型 String 适用于简单key-value存储、setnx key value实现分布式锁、计数器</description>
    </item>
    
    <item>
      <title>索引</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/3.%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/3.%E7%B4%A2%E5%BC%95/</guid>
      <description>概念 索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。 索引是一种数据结构。数</description>
    </item>
    
    <item>
      <title>引擎</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/2.%E5%BC%95%E6%93%8E/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/01.mysql/2.%E5%BC%95%E6%93%8E/</guid>
      <description>常考的主要分为InnoDB，MyISAM 主要区别 InnoDB引擎的4大特性 插入缓冲（insert buffer) 二次写(double write) 自适应哈希索引(ah</description>
    </item>
    
    <item>
      <title>原理</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/3.%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 20 Mar 2021 15:49:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/02.%E6%95%B0%E6%8D%AE%E5%BA%93/02.redis/3.%E5%8E%9F%E7%90%86/</guid>
      <description>为什么Redis速度那么快 基于内存实现 数据结构高效，底层多种数据结构支持不同的数据类型，比如HyperLogLog它连2个字节都不想浪费 提供</description>
    </item>
    
    <item>
      <title>IO NIO框架</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/5.io-nio%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/5.io-nio%E6%A1%86%E6%9E%B6/</guid>
      <description>这里主要涉及到IO多路复用 基本概念介绍 BIO 同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理</description>
    </item>
    
    <item>
      <title>java8特性</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/10.java8%E7%89%B9%E6%80%A7/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/10.java8%E7%89%B9%E6%80%A7/</guid>
      <description>java语言的特性 Lambda表达式和函数式接口 最简单的lambda表达式如下 1 Arrays.asList( &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;d&amp;#34; ).forEach( e -&amp;gt; System.out.println( e ) ); 当然，为了显式说明某个接口是函数式接口</description>
    </item>
    
    <item>
      <title>java基础</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/1.java%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/1.java%E5%9F%BA%E7%A1%80/</guid>
      <description>return和finally的执行顺序 finally语句在return语句执行之后return返回之前执行的，所以我们先执行return的语</description>
    </item>
    
    <item>
      <title>JVM模型</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/6.jvm%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/6.jvm%E6%A8%A1%E5%9E%8B/</guid>
      <description>JVM内存模型 这里主要还是会问一些Java的内存模型，1.8之前和之后的内存模型是不一样的 简单说一下每个部分是干嘛的吧 程序计数器 用于记录程序</description>
    </item>
    
    <item>
      <title>并发框架(JUC)</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/4.%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6juc/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/4.%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6juc/</guid>
      <description>并发框架，其实也叫 JUC 即 java.util.concurrent 包，分为（锁框架、原子类框架、同步器框架、集合框架、执行器框架） 线程创建方式 继承Thread类重写run方法 1 2 3 4</description>
    </item>
    
    <item>
      <title>参数调优</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/9.%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/9.%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>常用关键字</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/4.%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/4.%E5%B8%B8%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>for和range for循环的三种用法 for range用于遍历切片，数组或者map 几个用法 使用 for range a {} 遍历数组和切片，不关心索引和数据的情况； 使</description>
    </item>
    
    <item>
      <title>集合框架</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/3.%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/3.%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</guid>
      <description>集合框架也可以叫容器。（集合是用于存储数据的容器） 常问的有下面几个 ArrayList LinkList HashSet TreeSet HashMap List(对付顺序的好帮手)： 存储的元素是有序的、可重复的。 Se</description>
    </item>
    
    <item>
      <title>垃圾回收</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/8.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/8.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>判断对象是否是垃圾 引用计数算法：判断对象的引用数量 每引用一次就+1，当一个对象实例的某个引用超过了生命周期或者被设置为一个新值时，对象实例的</description>
    </item>
    
    <item>
      <title>类加载机制</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/7.%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/7.%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</guid>
      <description>类加载流程 只需要记住下面这5个阶段就行了 参考：JVM 基础 - Java 类加载机制 | Java 全栈知识体系 (pdai.tech) 下面简单介绍一下每个部分做了啥 加载 首先获取二进制流，</description>
    </item>
    
    <item>
      <title>面向对象</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/02.java/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>这个部分主要以面试题为主 京东面试题 是equals而不是equal，单词错了 类和对象 面向对象和面向过程的区别 面向过程 ：面向过程性能比面向对象高</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/2.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/2.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数据类型 数据类型占用的字节数 整数 int 64位操作系统默认为int64,32位操作系统为int32,但是类型检查时时int int8 (byte 1字节) int16 (short 2字节)</description>
    </item>
    
    <item>
      <title>语言基础</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/3.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 20 Mar 2021 15:46:19 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/01.%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/01.go/3.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</guid>
      <description>函数调用 这里面涉及的东西其实挺深的，所以等我后面又时间再去研究 Go 中函数传参仅有值传递一种方式； slice、map、channel都是引用类型</description>
    </item>
    
    <item>
      <title>CSS教程和技巧收藏</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/00.css%E6%95%99%E7%A8%8B%E5%92%8C%E6%8A%80%E5%B7%A7%E6%94%B6%E8%97%8F/</link>
      <pubDate>Tue, 11 Aug 2020 17:13:52 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/00.css%E6%95%99%E7%A8%8B%E5%92%8C%E6%8A%80%E5%B7%A7%E6%94%B6%E8%97%8F/</guid>
      <description>Flex 布局教程：语法篇 http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html CSS Grid 网格布局教程 http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html 只要一行代码，实现五种 CSS 经典布局 http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html 空间居中布局 不管容器的大小，项目总是占据中心点 并列式布局 多个项目并列</description>
    </item>
    
    <item>
      <title>Vuex</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/10.vuex/01.vuex/</link>
      <pubDate>Sat, 08 Aug 2020 10:38:33 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/10.vue%E7%AC%94%E8%AE%B0/10.vuex/01.vuex/</guid>
      <description>Vuex Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。 Vuex使用过程演示 以vue-cli3新创建出来的项目为例，演示Vuex的使用过程。 创建项目: 1</description>
    </item>
    
    <item>
      <title>CSS-function汇总</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/60.css-function%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 12 May 2020 09:36:44 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/60.css-function%E6%B1%87%E6%80%BB/</guid>
      <description></description>
    </item>
    
    <item>
      <title>「css技巧」使用hover和attr()定制悬浮提示</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/50.css%E6%8A%80%E5%B7%A7%E4%BD%BF%E7%94%A8hover%E5%92%8Cattr%E5%AE%9A%E5%88%B6%E6%82%AC%E6%B5%AE%E6%8F%90%E7%A4%BA/</link>
      <pubDate>Sat, 18 Apr 2020 12:14:09 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/50.css%E6%8A%80%E5%B7%A7%E4%BD%BF%E7%94%A8hover%E5%92%8Cattr%E5%AE%9A%E5%88%B6%E6%82%AC%E6%B5%AE%E6%8F%90%E7%A4%BA/</guid>
      <description>「css技巧」使用hover和attr()定制悬浮提示-demo See the Pen 【CSS：行为】使用:hover和attr()定制悬浮提示 by xugaoyi (@xugaoyi) on CodePen.</description>
    </item>
    
    <item>
      <title>比typeof运算符更准确的类型判断</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/100.%E6%AF%94typeof%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9B%B4%E5%87%86%E7%A1%AE%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/</link>
      <pubDate>Mon, 13 Apr 2020 15:56:54 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/100.%E6%AF%94typeof%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9B%B4%E5%87%86%E7%A1%AE%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/</guid>
      <description>比typeof运算符更准确的类型判断 不同数据类型的Object.prototype.toString方法返回值如下。 数值：返回[object</description>
    </item>
    
    <item>
      <title>npm packageJson属性详解</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/10.npm-packagejson%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 08 Apr 2020 17:16:38 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/10.npm-packagejson%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/</guid>
      <description>npm package.json属性详解 本文转自https://www.cnblogs.com/tzyy/p/5193811.html，作者：TZ</description>
    </item>
    
    <item>
      <title>水平垂直居中的几种方式-案例</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/40.%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Fri, 13 Mar 2020 16:13:43 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/40.%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-%E6%A1%88%E4%BE%8B/</guid>
      <description>水平垂直居中的几种方式-案例 See the Pen 水平垂直居中的几种方式 by xugaoyi (@xugaoyi) on CodePen.</description>
    </item>
    
    <item>
      <title>GitHub加速下载项目的方法</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/10.github%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 09 Mar 2020 10:28:09 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/10.github%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>GitHub加速下载项目的方法 国内在github上克隆项目总是异常的慢，据我多次克隆观察，下载速度最快就20k/s左右，特别是在克隆比较大的</description>
    </item>
    
    <item>
      <title>JS获取和修改url参数</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/90.js%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BF%AE%E6%94%B9url%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 05 Mar 2020 12:45:37 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/90.js%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BF%AE%E6%94%B9url%E5%8F%82%E6%95%B0/</guid>
      <description>JS获取和修改url参数 获取url参数 1 2 3 4 5 6 7 8 9 10 11 12 /** * 获取url里的参数 * @param arg 参数名 * @returns */ function getURLString(arg) { var reg = new RegExp(&amp;#34;(^|&amp;amp;)&amp;#34; + arg + &amp;#34;=([^&amp;amp;]*)(&amp;amp;|$)&amp;#34;, &amp;#34;i&amp;#34;); var r = window.location.search.substr(1).match(reg); if (r</description>
    </item>
    
    <item>
      <title>防抖与节流函数</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/80.%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 29 Feb 2020 15:07:47 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/80.%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/</guid>
      <description>防抖与节流函数 防抖和节流的作用都是在高频事件中防止函数被多次调用，是一种性能优化的方案。 区别在于，防抖函数只会在高频事件结束后n毫秒调用一次</description>
    </item>
    
    <item>
      <title>从box-sizing属性入手，了解盒子模型</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/35.%E4%BB%8Ebox-sizing%E5%B1%9E%E6%80%A7%E5%85%A5%E6%89%8B%E4%BA%86%E8%A7%A3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 27 Feb 2020 17:08:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/35.%E4%BB%8Ebox-sizing%E5%B1%9E%E6%80%A7%E5%85%A5%E6%89%8B%E4%BA%86%E8%A7%A3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</guid>
      <description>从box-sizing属性入手，了解盒子模型 背景 先声明一下运用的场景，假如项目布局使用的是自适应的布局方式，div给出的宽度是百分比的形式，</description>
    </item>
    
    <item>
      <title>文字在一行或多行时超出显示省略号</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/30.%E6%96%87%E5%AD%97%E5%9C%A8%E4%B8%80%E8%A1%8C%E6%88%96%E5%A4%9A%E8%A1%8C%E6%97%B6%E8%B6%85%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/</link>
      <pubDate>Sun, 23 Feb 2020 15:07:08 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/30.%E6%96%87%E5%AD%97%E5%9C%A8%E4%B8%80%E8%A1%8C%E6%88%96%E5%A4%9A%E8%A1%8C%E6%97%B6%E8%B6%85%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/</guid>
      <description>文字在一行或多行时超出显示省略号 一行超出显示省略 1 2 3 overflow: hidden; white-space: nowrap; text-overflow: ellipsis; :::demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;lt;html&amp;gt; &amp;lt;div class=&amp;#34;box-42b6&amp;</description>
    </item>
    
    <item>
      <title>将一维数组按指定长度转为二维数组</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/70.%E5%B0%86%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%89%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E8%BD%AC%E4%B8%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 23 Feb 2020 13:49:31 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/70.%E5%B0%86%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%89%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E8%BD%AC%E4%B8%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</guid>
      <description>将一维数组按指定长度转为二维数组 将一维数组按指定长度转为二维数组 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function pages(arr, len) { const pages = [] arr.forEach((item, index) =&amp;gt; { const page = Math.floor(index / len) if (!pages[page]) { pages[page]</description>
    </item>
    
    <item>
      <title>「布局技巧」图片未加载前自动撑开元素高度</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/20.%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7%E5%9B%BE%E7%89%87%E6%9C%AA%E5%8A%A0%E8%BD%BD%E5%89%8D%E8%87%AA%E5%8A%A8%E6%92%91%E5%BC%80%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6/</link>
      <pubDate>Sat, 22 Feb 2020 16:37:10 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/20.%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7%E5%9B%BE%E7%89%87%E6%9C%AA%E5%8A%A0%E8%BD%BD%E5%89%8D%E8%87%AA%E5%8A%A8%E6%92%91%E5%BC%80%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6/</guid>
      <description>「布局技巧」图片未加载前自动撑开元素高度 在移动端开发中，有一些元素是根据图片高度来自动撑开的 ，高度不能写死（如轮播图的外层元素）。在网络较慢</description>
    </item>
    
    <item>
      <title>ES5面向对象</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/03.es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 22 Feb 2020 10:35:43 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/03.es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>ES5面向对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 //面向对象</description>
    </item>
    
    <item>
      <title>JS随机打乱数组</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/50.js%E9%9A%8F%E6%9C%BA%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 08 Feb 2020 17:42:03 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/50.js%E9%9A%8F%E6%9C%BA%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/</guid>
      <description>JS随机打乱数组 1 2 3 4 5 6 7 8 9 10 11 12 13 function shuffle(arr) { // 随机打乱数组 let _arr = arr.slice() // 调用数组副本，不改变原数组 for (let i = 0; i &amp;lt; _arr.length; i++) { let j = getRandomInt(0, i) let t = _arr[i] _arr[i] =</description>
    </item>
    
    <item>
      <title>一个完美主义者的自我救赎</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/05.%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/01.%E4%B8%80%E4%B8%AA%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E6%95%91%E8%B5%8E/</link>
      <pubDate>Thu, 16 Jan 2020 15:15:27 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/05.%E5%BF%83%E6%83%85%E6%9D%82%E8%B4%A7/01.%E4%B8%80%E4%B8%AA%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E6%95%91%E8%B5%8E/</guid>
      <description>一个完美主义者的自我救赎 最近，看到一个心理测试题是测试你是否有完美主义： （1）你是不是经常为自己设定目标，而且最终往往达不到那些目标？ （2）</description>
    </item>
    
    <item>
      <title>判断是否为移动端浏览器</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/60.%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8/</link>
      <pubDate>Sat, 04 Jan 2020 15:25:11 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/60.%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8/</guid>
      <description>判断是否为移动端浏览器 1 2 3 4 5 6 const flag = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i); if(flag){ // 移动端 } else { // PC端 }</description>
    </item>
    
    <item>
      <title>提高学习效率的策略</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/02.%E6%8F%90%E9%AB%98%E5%AD%A6%E4%B9%A0%E6%95%88%E7%8E%87%E7%9A%84%E7%AD%96%E7%95%A5/</link>
      <pubDate>Sat, 04 Jan 2020 11:54:14 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/02.%E6%8F%90%E9%AB%98%E5%AD%A6%E4%B9%A0%E6%95%88%E7%8E%87%E7%9A%84%E7%AD%96%E7%95%A5/</guid>
      <description>提高学习效率的策略 推荐一本关于学习方法的书《认知天性》，里面有讲到有一些简单实用的学习策略，能让大家学的更好、记得更牢，而且这些策略人人可用</description>
    </item>
    
    <item>
      <title>处理问题的思路</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/05.%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Fri, 03 Jan 2020 14:36:02 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/05.%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/</guid>
      <description>处理问题的思路 工作中遇到问题？ 遇到问题卡住了，可以先休息一会儿，调整一下状态，喝杯水走走放松放松，然后想想有没有遗漏的地方，或者其他的解决方</description>
    </item>
    
    <item>
      <title>自律小建议</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/04.%E8%87%AA%E5%BE%8B%E5%B0%8F%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Fri, 03 Jan 2020 14:35:18 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/04.%E8%87%AA%E5%BE%8B%E5%B0%8F%E5%BB%BA%E8%AE%AE/</guid>
      <description>自律小建议 培养专注 练习冥想、瑜伽等 排除外界干扰 手机调到勿扰，在图书馆学习等 规定学习时间 番茄时间管理——使用番茄时间管理法，选择一个待完成的任</description>
    </item>
    
    <item>
      <title>提高记忆的技巧</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/03.%E6%8F%90%E9%AB%98%E8%AE%B0%E5%BF%86%E7%9A%84%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Fri, 03 Jan 2020 14:34:48 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/01.%E5%AD%A6%E4%B9%A0/03.%E6%8F%90%E9%AB%98%E8%AE%B0%E5%BF%86%E7%9A%84%E6%8A%80%E5%B7%A7/</guid>
      <description>提高记忆的技巧 多个感官并用 记忆时调用一切感官。没人的话可以大声阅读，有人的话可以默念，轻微摇晃手指等，有助于保持专注。 重复记忆 每天留出半个到</description>
    </item>
    
    <item>
      <title>GitHub &#43; jsDelivr &#43; TinyPNG&#43; PicGo 打造稳定快速、高效免费图床</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/03.github-&#43;-jsdelivr-&#43;-tinypng&#43;-picgo-%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Fri, 03 Jan 2020 12:55:43 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/03.github-&#43;-jsdelivr-&#43;-tinypng&#43;-picgo-%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</guid>
      <description>GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床 前言 Q：为什么要使用图床呢？什么是图床？ A：写博客文章时，图片的上传和存放是一个问题，有的朋友可能会把</description>
    </item>
    
    <item>
      <title>GitHub Actions 实现自动部署静态博客</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/02.github-actions-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 27 Dec 2019 11:44:41 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/02.github-actions-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid>
      <description>GitHub Actions 实现自动部署静态博客 前言 我使用vuepress搭建了一个静态博客，挂在了Github pages和Coding pages上面。 coding pages</description>
    </item>
    
    <item>
      <title>nodejs递归读取所有文件</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/03.nodejs/01.nodejs%E9%80%92%E5%BD%92%E8%AF%BB%E5%8F%96%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 26 Dec 2019 15:57:32 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/03.nodejs/01.nodejs%E9%80%92%E5%BD%92%E8%AF%BB%E5%8F%96%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</guid>
      <description>nodejs递归读取所有文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 var fs = require(&amp;#39;fs&amp;#39;); var path = require(&amp;#39;path&amp;#39;); function readFileList(dir, filesList = []) { const files = fs.readdirSync(dir); console.log(files); files.forEach((item, index) =&amp;gt; { var fullPath = path.join(dir, item); const stat = fs.statSync(fullPath); if (stat.isDirectory()) {</description>
    </item>
    
    <item>
      <title>CSS3之animation动画</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/08.css3%E4%B9%8Banimation%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/08.css3%E4%B9%8Banimation%E5%8A%A8%E7%94%BB/</guid>
      <description>CSS3之animation动画 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>CSS3之transition过渡</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/07.css3%E4%B9%8Btransition%E8%BF%87%E6%B8%A1/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/07.css3%E4%B9%8Btransition%E8%BF%87%E6%B8%A1/</guid>
      <description>CSS3之transition过渡 html结构 1 2 3 4 5 &amp;lt;div class=&amp;#34;box1&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;div1&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;div2&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;div3&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 先给元素设置transition过渡，指定样式和时间，这里设置al</description>
    </item>
    
    <item>
      <title>ES6面向对象</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/04.es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/04.es6%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>ES6面向对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 //面向对象封装 class</description>
    </item>
    
    <item>
      <title>flex布局案例-基础</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/02.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/02.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9F%BA%E7%A1%80/</guid>
      <description>flex布局案例-基础 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21</description>
    </item>
    
    <item>
      <title>flex布局案例-圣杯布局</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/04.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/04.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/</guid>
      <description>flex布局案例-圣杯布局 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>flex布局案例-输入框布局</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/06.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E8%BE%93%E5%85%A5%E6%A1%86%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/06.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E8%BE%93%E5%85%A5%E6%A1%86%E5%B8%83%E5%B1%80/</guid>
      <description>flex布局案例-输入框布局 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description>
    </item>
    
    <item>
      <title>flex布局案例-骰子</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/03.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E9%AA%B0%E5%AD%90/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/03.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E9%AA%B0%E5%AD%90/</guid>
      <description>flex布局案例-骰子 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21</description>
    </item>
    
    <item>
      <title>flex布局案例-网格布局</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/05.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/05.flex%E5%B8%83%E5%B1%80%E6%A1%88%E4%BE%8B-%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/</guid>
      <description>flex布局案例-网格布局 可用F12开发者工具查看元素及样式，可打开codepen在线编辑代码。 ::: demo [vanilla] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>flex布局语法</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/01.flex%E5%B8%83%E5%B1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/02.%E9%A1%B5%E9%9D%A2/20.css/01.flex%E5%B8%83%E5%B1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>flex布局语法 一、flex 布局是什么？ Flex是 Flexible Box 的缩写，意为&amp;quot;弹性布局&amp;quot;，用来为盒状模型提供最大的灵活性。 任何一个</description>
    </item>
    
    <item>
      <title>GitHub高级搜索技巧</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/01.github%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/02.github%E6%8A%80%E5%B7%A7/01.github%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</guid>
      <description>GitHub高级搜索技巧 in:name &amp;lt;关键字&amp;gt; 仓库名称带关键字查询 in:description &amp;lt;关键字&amp;gt; 仓库描述带关键字查询 in:readme &amp;lt;关键字&amp;gt; RE</description>
    </item>
    
    <item>
      <title>Git使用手册</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/01.git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/01.git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</guid>
      <description>Git使用手册 安装 官网下载：https://git-scm.com/downloads 下载完成后使用默认进行安装。 安装完成后，在开始菜单里找</description>
    </item>
    
    <item>
      <title>Markdown使用教程</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/02.markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/02.markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
      <description>Markdown使用教程 一、Markdown 简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。 应用 当前许多网站都广泛使</description>
    </item>
    
    <item>
      <title>new命令原理</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/02.new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/02.new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86/</guid>
      <description>new命令原理 使用new命令时，它后面的函数依次执行下面的步骤： 创建一个空对象，作为将要返回的实例对象。 将这个空对象的原型，指向构造函数的p</description>
    </item>
    
    <item>
      <title>npm常用命令</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/03.npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/03.npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>npm常用命令 简介 npm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种： 允许用户从npm服务器下载别人编写的第三方包到本</description>
    </item>
    
    <item>
      <title>yaml语言教程</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/15.yaml%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/01.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/15.yaml%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/</guid>
      <description>yaml语言教程 简介 YAML 是 &amp;ldquo;YAML Ain&amp;rsquo;t a Markup Language&amp;rdquo;（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实</description>
    </item>
    
    <item>
      <title>多种数组去重性能对比</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/06.%E5%A4%9A%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/01.%E5%89%8D%E7%AB%AF/01.javascript%E6%96%87%E7%AB%A0/06.%E5%A4%9A%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</guid>
      <description>多种数组去重性能对比 测试模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // 创建一个 1 ~ 10w 的数组，Array.from为ES6语法 let arr1 = Array.from(new Array(1000000),</description>
    </item>
    
    <item>
      <title>解决百度无法收录搭建在GitHub上的个人博客的问题</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/01.%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E6%97%A0%E6%B3%95%E6%94%B6%E5%BD%95%E6%90%AD%E5%BB%BA%E5%9C%A8github%E4%B8%8A%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/01.%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E6%97%A0%E6%B3%95%E6%94%B6%E5%BD%95%E6%90%AD%E5%BB%BA%E5%9C%A8github%E4%B8%8A%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>解决百度无法收录搭建在GitHub上的静态博客的问题 ::: warning 如果你正在寻找本博客的搭建文档，博主建议您查看这个仓库的README。 ::: 背景 由于Gi</description>
    </item>
    
    <item>
      <title>面试问题集锦</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/03.%E9%9D%A2%E8%AF%95/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/04.%E6%9B%B4%E5%A4%9A/03.%E9%9D%A2%E8%AF%95/01.%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</guid>
      <description>面试问题集锦 请做一下自我介绍 回答提示： 一般人回答这个问题过于平常，只说姓名、年龄、工作经验，这些在简历上都有。其实，企业最希望知道的是求职者</description>
    </item>
    
    <item>
      <title>使用Gitalk实现静态博客无后台评论系统</title>
      <link>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/02.%E4%BD%BF%E7%94%A8gitalk%E5%AE%9E%E7%8E%B0%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%97%A0%E5%90%8E%E5%8F%B0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 25 Dec 2019 14:27:01 +0000</pubDate>
      
      <guid>https://lyr-2000.github.io/html-demo/post/%E6%94%B6%E9%9B%86%E8%B5%84%E6%96%99/09.%E5%89%8D%E7%AB%AF/03.%E6%8A%80%E6%9C%AF/04.%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/02.%E4%BD%BF%E7%94%A8gitalk%E5%AE%9E%E7%8E%B0%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%97%A0%E5%90%8E%E5%8F%B0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</guid>
      <description>使用Gitalk实现静态博客无后台评论系统 前言 Gitalk，一个基于 Github Issue 和 Preact 开发的评论插件。 下面我们来用它在vuepress搭建的博客中搭建</description>
    </item>
    
  </channel>
</rss>
